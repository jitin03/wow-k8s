apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongodb-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  hostPath:
     path: "/mnt/data"  # - for Unix/Linux
    #  path: "/run/desktop/mnt/host/c/temp/testfiles"
     type: DirectoryOrCreate
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
spec:
  resources:
    requests:
      storage: 1Gi
  storageClassName: manual
  accessModes:
    - ReadWriteOnce


---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
spec:
  selector:
    matchLabels:
      app: mongodb
  serviceName: mongodb
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:latest
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: password


        ports:
        - containerPort: 27017
          name: mongodb
        volumeMounts:
        - name: mongodb-persistent-storage
          mountPath: /var/lib/mongodb
      volumes:
        - name: mongodb-initdb
          configMap:
            name: mongodb-initdb-cm
        - name: mongodb-persistent-storage
          persistentVolumeClaim:
            claimName: mongodb-pvc


# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: mongodb-initdb-cm
# data:
#   init.sql: |
#     CREATE DATABASE IF NOT EXISTS orderdb;
#     CREATE DATABASE IF NOT EXISTS paymentdb;
#     CREATE DATABASE IF NOT EXISTS productdb;


---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  type: LoadBalancer
  selector:
    app: mongodb
  ports:
  - port: 27017

